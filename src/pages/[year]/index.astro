---
import { getCollection } from 'astro:content';
import getPostsByGroupCondition from '../../scripts/getPostsByGroupCondition';
import { DateTime } from 'luxon';
import BaseLayout from '../../layouts/BaseLayout.astro';

import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";

export const getStaticPaths = (async () => {

  const posts = await getCollection("blog");

  const years = Object.entries(
    getPostsByGroupCondition(posts, (post) => DateTime.fromISO(post.data.date).toJSDate().getFullYear())
  )
    .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
    .map(([year, yearGroup]) => ({
      params: { year },
      props: { posts: yearGroup.sort((a, b) => DateTime.fromISO(a.data.date).toJSDate().getTime() - DateTime.fromISO(b.data.date).toJSDate().getTime()) },
    }));

  return years;
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { year } = Astro.params as Params;
const { posts } = Astro.props as Props;
const pageTitle = `Posts from ${year}`;

function formatDateWithSuffix(dateString: string) {
  const date = DateTime.fromISO(dateString);
  const day = date.day;
  const suffix = (day % 10 === 1 && day !== 11) ? 'st' :
                 (day % 10 === 2 && day !== 12) ? 'nd' :
                 (day % 10 === 3 && day !== 13) ? 'rd' : 'th';
  return `${date.toFormat('d')}${suffix} ${date.toFormat('MMMM')}`;
}
---
<BaseLayout pageTitle={pageTitle}>

<h1>{year}</h1>

<ul class="list-none">
  {posts.map((post) => (
    <li>
      <time datetime={post.data.date} class="text-gray-500">{formatDateWithSuffix(post.data.date)}</time>
      - <a href={`/${post.id}/`}>{post.data.title}</a>
    </li>
  ))}
</ul>
</BaseLayout>