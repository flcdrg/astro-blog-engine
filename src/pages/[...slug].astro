---
import { getCollection, render } from "astro:content";
import { DateTime } from "luxon";
import MarkdownPostLayout from "../layouts/MarkdownPostLayout.astro";
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";
import onlyCurrent from "../scripts/filters";

export const getStaticPaths = (async () => {
  const posts = (await getCollection("blog"))
    .filter(onlyCurrent)
    .sort((a, b) => {
      return DateTime.fromISO(a.data.date).toMillis() -
        DateTime.fromISO(b.data.date).toMillis();
    });

  return posts.map((post) => {

    return ({
      params: {
        slug: post.id
      },
      props: {
        post: post,
        year: DateTime.fromISO(post.data.date).toFormat("yyyy"),
      },
    });
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props as Props;
const { } = Astro.params as Params;

if (!post) {
  throw new Error("Post not found");
}

const { Content } = await render(post);
---

{
  post && (
    <MarkdownPostLayout frontmatter={post.data}>
      <link rel="canonical" href={new URL(Astro.url.pathname.replace(".html", ""), Astro.site)} slot="head" />

      <Content />
    </MarkdownPostLayout>
  )
}
