---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import getPostsByGroupCondition from "../../scripts/getPostsByGroupCondition";
import { DateTime } from "luxon";

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return Object.entries(
    getPostsByGroupCondition(posts, (post) => DateTime.fromISO(post.data.date).year)
  )
    .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
    .map(([year, yearGroup]) => ({
      params: { slug: year },
      props: { posts: yearGroup },
    }));
}

const MonthMap: Record<string, string> = {
  "1": "January",
  "2": "February",
  "3": "March",
  "4": "April",
  "5": "May",
  "6": "June",
  "7": "July",
  "8": "August",
  "9": "September",
  "10": "October",
  "11": "November",
  "12": "December",
};

const { posts } = Astro.props;
const { slug } = Astro.params;
const pageTitle = slug ? `Archive for ${slug}` : "Archive";
---

<BaseLayout pageTitle={pageTitle}>

  {Object.entries(
    getPostsByGroupCondition(
      posts,
      (post) => DateTime.fromISO(post.data.date).month + 1
    )
  )
    .sort(([monthA], [monthB]) => Number(monthA) - Number(monthB))
    .map(([month, monthGroup]) => (
      <div class="flex flex-col sm:flex-row">
        <h3>{MonthMap[month]}</h3>
        <ul>
          {monthGroup
            .sort(
              (a, b) =>
                Math.floor(DateTime.fromISO(b.data.date).toUnixInteger() / 1000) -
                Math.floor(DateTime.fromISO(a.data.date).toUnixInteger() / 1000)
            )
            .map(({ id, data /*, slug */ }) => (
              <li>
                <a href={`/${id}/`}>{data.title}</a>
              </li>
            ))}
        </ul>
      </div>
    ))}

</BaseLayout>
