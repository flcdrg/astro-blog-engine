name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Automatically execute this workflow on a schedule.
  schedule:
    # POSIX-compatible cron syntax is supported.
    - cron: "0 0 * * *" # Rebuild once a day.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  id-token: write
  pull-requests: write # Required for PR comments
  deployments: write # Required for Cloudflare Pages

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Dump GitHub context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: .astro
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
            ${{ runner.os }}-pnpm

      - name: Setup dist cache
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-dist-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-dist-${{ hashFiles('pnpm-lock.yaml') }}
            ${{ runner.os }}-dist

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - run: pnpm install

      # PR builds use dev mode
      - name: Build PR
        if: github.event_name == 'pull_request'
        run: pnpm build --devOutput

      # Regular production build (for non-PR builds)
      - name: Build
        if: github.event_name == 'push'
        run: pnpm build

      # dist as artifact
      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          include-hidden-files: true # otherwise .NET.html doesn't get included!

  publish_to_netlify_pr:
    runs-on: ubuntu-latest
    needs: build
    name: Publish PR to Netlify
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: List files in dist
        run: ls -alR dist

      - name: Install Netlify CLI
        run: npm install netlify-cli -g

      - name: Deploy PR build to Netlify
        run: |
          netlify deploy --dir=dist --json --message "${{ github.event.pull_request.head.title }}" > deploy.json
          cat deploy.json

          # Post deploy_url to PR comment
          deploy_url=$(jq -r '.deploy_url' deploy.json)

          # Post PR comment with deploy_url
          gh pr comment ${{ github.event.pull_request.number }} --body "Preview URL: $deploy_url"

        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}
          GH_TOKEN: ${{ github.token }}

  # Push to Netlify if not a PR build and this is the astro-blog-engine repo
  publish_to_netlify:
    runs-on: ubuntu-latest
    needs: build
    name: Publish to Netlify
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'flcdrg/astro-blog-engine'

    # Allow one concurrent deployment
    concurrency:
      group: "pages"
      cancel-in-progress: false

    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install Netlify CLI
        run: npm install netlify-cli -g

      - name: Publish to Netlify
        run: |
          netlify deploy --prod --dir=dist --message "${{ github.event.head_commit.message }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}

  # We want this to run in this repo as well as the blog repo, so we only depend on 'build'
  # and not 'publish_to_netlify'.
  clean_netlify:
    runs-on: ubuntu-latest
    needs: build
    name: Clean Netlify Deploys
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Install Netlify CLI
        run: npm install netlify-cli -g

      - name: Clean Netlify Deploy previews
        run: |
          $listData = @{ site_id = $env:NETLIFY_SITE_ID } | ConvertTo-Json
          $json = netlify api listSiteDeploys --data $listData | ConvertFrom-Json
          $json | Sort-Object -Property id -Descending | Where-Object { $_.context -eq "deploy-preview" } | ForEach-Object {
              $deleteData = @{ site_id = $env:NETLIFY_SITE_ID; deploy_id = $_.id } | ConvertTo-Json
              Write-Host "Deleting deploy preview: $($_.id)"
              netlify api deleteSiteDeploy --data $deleteData
          }

        shell: pwsh
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}

  publish_to_cloudflare:
    runs-on: ubuntu-latest
    needs: build
    name: Publish to Cloudflare Pages
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository != 'flcdrg/astro-blog-engine'

    # Allow one concurrent deployment
    concurrency:
      group: "pages"
      cancel-in-progress: false

    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # Push to Cloudflare Pages if not a PR build and this is not the astro-blog-engine repo
      - name: Publish to Cloudflare Pages
        uses: The-Noah/pages-action@v1.0.2
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: blog
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  update_readme:
    runs-on: ubuntu-latest
    needs: publish_to_cloudflare
    name: Update GitHub Profile Readme
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository != 'flcdrg/astro-blog-engine'

    steps:
      - name: Workflow Dispatch
        uses: benc-uk/workflow-dispatch@v1.2.4
        with:
          workflow: Update
          ref: ${{ github.event.ref }}
          repo: flcdrg/flcdrg
          token: ${{ secrets.GH_PAGES_TOKEN }}

  feedburner:
    runs-on: ubuntu-latest
    needs: publish_to_cloudflare
    name: Notify Feedburner
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository != 'flcdrg/astro-blog-engine'

    # ignore errors as sometimes this fails
    continue-on-error: true
    steps:
      - run: |
          curl -X POST -F 'url=https://feeds.feedburner.com/DavesDaydreams' http://feedburner-pinger.herokuapp.com
        name: Ping

  lighthouse:
    runs-on: ubuntu-latest
    needs: build
    name: Lighthouse Report

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: run Lighthouse CI
        run: |
          # Robots.txt defaults to disallow, which is not what we want for the lighthouse test
          rm dist/robots.txt

          npm install -g @lhci/cli@0.14.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_MAX_AUTODISCOVER_URLS: ${{ github.ref != 'refs/heads/main' && 6 || 10 }} # Limit the number of URLs to 5 for PR builds

  linkChecker:
    runs-on: ubuntu-latest
    needs: build
    name: Link Checker
    steps:
      # Cache lychee results (e.g. to avoid hitting rate limits)
      - name: Restore lychee cache
        uses: actions/cache@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Link Checker
        id: lychee
        uses: lycheeverse/lychee-action@v2.3.0 # 2.4.0 has a bug. Don't upgrade until fixed
        with:
          fail: false
          output: ${{ github.workspace }}/output.md
          args: --root-dir "$(pwd)/dist/" './**/*.html' --max-retries 0 --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0" --fallback-extensions html --exclude www.linkedin.com
        env:
          # to be used in GH case rate limits are surpassed
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Report results
        run: |
          pwd
          ls -alR
          echo '### Hello world! ðŸš€' >> $GITHUB_STEP_SUMMARY
          cat output.md >> $GITHUB_STEP_SUMMARY

      - name: Publish results
        uses: actions/upload-artifact@v4
        with:
          name: link-checker-results
          path: output.md