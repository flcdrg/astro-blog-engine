name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Automatically execute this workflow on a schedule.
  schedule:
    # POSIX-compatible cron syntax is supported.
    - cron: "0 0 * * *" # Rebuild once a day.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  id-token: write
  pull-requests: write # Required for PR comments
  deployments: write # Required for Cloudflare Pages

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Front Matter

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.2.0

      - name: Use Node.js 22.x
        uses: actions/setup-node@v5
        with:
          node-version: 22.x

      - run: pnpm install
        name: Install dependencies

      - run: pnpm run validate-frontmatter
        name: Check front matter

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Dump GitHub context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: .astro
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
            ${{ runner.os }}-pnpm

      - name: Setup dist cache
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-dist-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-dist-${{ hashFiles('pnpm-lock.yaml') }}
            ${{ runner.os }}-dist

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.2.0

      - name: Use Node.js 22.x
        uses: actions/setup-node@v5
        with:
          node-version: 22.x
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - run: pnpm install

      # PR builds use dev mode
      - name: Build PR
        if: github.event_name == 'pull_request'
        run: pnpm build --devOutput

      # Regular production build for anything else
      - name: Build
        if: github.event_name != 'pull_request'
        run: pnpm build

      # begin-snippet: verify-cli-use-with-dotnet-tool
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 9.x

      - name: Install Verify.Cli
        run: dotnet tool install --global Verify.Cli

      - name: Verify
        run: |
          verify --file dist/feed.xml --verified-dir verified --scrub-inline-datetime "yyyy-MM-ddTHH:mm:ss.fffZ"
      # end-snippet
      # begin-snippet: verify-cli-diff-in-ci
      - name: Diff files if error
        if: failure()
        run: |
          diff -u dist/feed.xml verified/feed.xml.verified.xml
      # end-snippet
      # begin-snippet: verify-cli-use-with-docker
      - name: Verify post
        run: docker run --rm --user "$(id -u):$(id -g)" -v $PWD:/tmp flcdrg/verify-cli --file /tmp/dist/2025/07/azure-pipeline-template-expression.html --verified-dir /tmp/verified --scrub-inline-pattern '(?<prefix>")/_astro/[^"]+(?<suffix>")' --scrub-inline-pattern '(?<prefix>title=")[^"]+(?<suffix>")' --scrub-inline-remove ' data-image-component="true"' --verbosity detailed
      # end-snippet

      - name: Diff post if error
        if: failure()
        run: |
          ls -al verified/
          echo ""
          diff -u verified/azure-pipeline-template-expression.html.received.html verified/azure-pipeline-template-expression.html.verified.html

      # dist as artifact
      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          include-hidden-files: true # otherwise .NET.html doesn't get included!

      - name: Upload wrangler.jsonc
        uses: actions/upload-artifact@v4
        with:
          name: wrangler.jsonc
          path: wrangler.jsonc

  publish_to_cloudflare:
    runs-on: ubuntu-latest
    needs: build
    name: Publish to Cloudflare
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}

    if: github.ref == 'refs/heads/main'

    # Allow one concurrent deployment
    concurrency:
      group: "pages"
      cancel-in-progress: false

    steps:
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.2.0
        with:
          version: 10.x

      - name: Download dist artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Download wrangler.jsonc
        uses: actions/download-artifact@v5
        with:
          name: wrangler.jsonc
          path: .

      - name: Cloudflare
        uses: cloudflare/wrangler-action@v3.14.1
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: 4.43.0 # https://github.com/cloudflare/workers-sdk/releases

  publish_to_cloudflare_pr:
    runs-on: ubuntu-latest
    needs: build
    name: Preview PR on Cloudflare
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.deployment-url }}

    if: github.ref != 'refs/heads/main'

    # Allow one concurrent deployment
    concurrency:
      group: "pages"
      cancel-in-progress: false

    steps:
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.2.0
        with:
          version: 10.x

      - name: Download dist artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Download wrangler.jsonc
        uses: actions/download-artifact@v5
        with:
          name: wrangler.jsonc
          path: .

      - name: Cloudflare Preview
        uses: cloudflare/wrangler-action@v3.14.1
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: versions upload
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: 4.43.0

      - name: Output variables
        run: echo $OUTPUTS
        env:
          OUTPUTS: ${{ toJson(steps.deploy.outputs) }}

  update_readme:
    runs-on: ubuntu-latest
    needs: publish_to_cloudflare
    name: Update GitHub Profile Readme
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository != 'flcdrg/astro-blog-engine'

    steps:
      - name: Workflow Dispatch
        uses: benc-uk/workflow-dispatch@v1.2.4
        with:
          workflow: Update
          ref: ${{ github.event.ref }}
          repo: flcdrg/flcdrg
          token: ${{ secrets.GH_PAGES_TOKEN }}

  feedburner:
    runs-on: ubuntu-latest
    needs: publish_to_cloudflare
    name: Notify Feedburner
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository != 'flcdrg/astro-blog-engine'

    # ignore errors as sometimes this fails
    continue-on-error: true
    steps:
      - run: |
          curl -X POST -F 'url=https://feeds.feedburner.com/DavesDaydreams' http://feedburner-pinger.herokuapp.com
        name: Ping

  lighthouse:
    runs-on: ubuntu-latest
    needs: build
    name: Lighthouse Report

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Download dist artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.2.0

      - name: Install Node.js 22.x
        uses: actions/setup-node@v5
        with:
          node-version: 22.x

      - name: Extract latest post URL from feed
        id: extract-url
        run: |
          [xml]$feedXml = Get-Content "dist/feed.xml"
          $firstEntry = $feedXml.feed.entry[0]
          $originalUrl = $firstEntry.link | Where-Object { $_.rel -eq "alternate" -and $_.type -eq "text/html" } | Select-Object -First 1 | ForEach-Object { $_.href }
          $localhostUrl = $originalUrl -replace "https://[^/]+", "http://localhost"

          # append .html to the URL if it doesn't already end with .html
          if ($localhostUrl -notlike "*.html") {
            $localhostUrl += ".html"
          }
          echo "latest-url=$localhostUrl" >> $env:GITHUB_OUTPUT
          echo "Latest URL: $localhostUrl"
        shell: pwsh

      - name: run Lighthouse CI
        run: |
          # Robots.txt defaults to disallow, which is not what we want for the lighthouse test
          rm dist/robots.txt

          npm install -g @lhci/cli@0.14.x

          lhci autorun --collect.url="${{ steps.extract-url.outputs.latest-url }}" --collect.url="http://localhost/index.html" --collect.url="http://localhost/speaking.html" --collect.url="http://localhost/2025.html"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Lighthouse Summary
        run: |
          # Generate a summary of the Lighthouse report
          $json = Get-Content .lighthouseci/links.json | ConvertFrom-Json

          $markDown = "## Lighthouse Report Summary`n`n"
          $markDown += "| URL | Performance | Accessibility | Best Practices | SEO | PWA |`n"
          $markDown += "| --- | :---: | :---: | :---: | :---: | :---: |`n"

          foreach ($property in $json.PSObject.Properties) {
            $url = $property.Name
            $reportUrl = $property.Value
            
            # Find all related lhr files for this URL
            $lhrFiles = Get-ChildItem .lighthouseci/lhr-*.json | Where-Object { 
              $content = Get-Content $_ | ConvertFrom-Json
              $content.requestedUrl -eq $url -or $content.finalUrl -eq $url
            }
            
            # Get the latest file based on fetchTime
            $latestLhrFile = $lhrFiles | ForEach-Object {
              $content = Get-Content $_ | ConvertFrom-Json
              [PSCustomObject]@{
                File = $_
                FetchTime = $content.fetchTime
              }
            } | Sort-Object -Property FetchTime -Descending | Select-Object -First 1
            
            if ($latestLhrFile) {
              $lhrContent = Get-Content $latestLhrFile.File | ConvertFrom-Json
              
              # Calculate scores - multiply by 100 and round to show as percentages
              $performance = [Math]::Round($lhrContent.categories.performance.score * 100)
              $accessibility = [Math]::Round($lhrContent.categories.accessibility.score * 100)
              $bestPractices = [Math]::Round($lhrContent.categories.'best-practices'.score * 100)
              $seo = [Math]::Round($lhrContent.categories.seo.score * 100)
              $pwa = if ($lhrContent.categories.pwa.score) { [Math]::Round($lhrContent.categories.pwa.score * 100) } else { "N/A" }
              
              # Add emoji indicators based on score
              $getEmoji = {
                param($score)
                if ($score -eq "N/A") { return "N/A" }
                if ($score -ge 90) { return "✅ $score%" }
                elseif ($score -ge 50) { return "⚠️ $score%" }
                else { return "❌ $score%" }
              }
              
              # Display scores with emojis
              $markDown += "| [$url]($reportUrl) | $(&$getEmoji $performance) | $(&$getEmoji $accessibility) | $(&$getEmoji $bestPractices) | $(&$getEmoji $seo) | $(&$getEmoji $pwa) |`n"
            }
            else {
              $markDown += "| [$url]($reportUrl) | No data | No data | No data | No data | No data |`n"
            }
          }

          echo $markDown >> $env:GITHUB_STEP_SUMMARY
        shell: pwsh

  linkChecker:
    runs-on: ubuntu-latest
    needs: build
    name: Link Checker
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # Cache lychee results (e.g. to avoid hitting rate limits)
      - name: Restore lychee cache
        uses: actions/cache@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-

      - name: Download dist artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Link Checker
        id: lychee
        uses: lycheeverse/lychee-action@v2.6.1 # 2.4.0 has a bug. Don't upgrade until fixed
        with:
          fail: false
          output: ${{ github.workspace }}/output.json
          format: json
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          args: --root-dir "$(pwd)/dist/" 'dist/**/*.html' --cache --max-cache-age 7d --max-retries 0 --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0" --fallback-extensions html -v --cache-exclude-status '429' --insecure --accept '200..=204'

      - name: Report results
        run: |
          ./Generate-LycheeReport.ps1 -InputJsonFile output.json -OutputMarkdownFile output.md

          ls -al

          cat output.md

          cat output.md >> $env:GITHUB_STEP_SUMMARY
        shell: pwsh

      - name: Publish results
        uses: actions/upload-artifact@v4
        with:
          name: link-checker-results
          path: output.*
